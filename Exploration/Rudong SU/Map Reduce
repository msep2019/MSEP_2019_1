Three parts of a MapReduce program:

  1. Mapper
    public static class Map extends Mapper<LongWritable,Text,Text,IntWritable> {
    
    public void map(LongWritable key, Text value, Context context) throws IOException,InterruptedException {
      String line = value.toString();
      StringTokenizer tokenizer = new StringTokenizer(line);
      while (tokenizer.hasMoreTokens()) 
    {
      value.set(tokenizer.nextToken());
      context.write(value, new IntWritable(1));
    }
    
    
  2. Reducer
    public static class Reduce extends Reducer<Text,IntWritable,Text,IntWritable> {
 
    public void reduce(Text key, Iterable<IntWritable> values,Context context) throws IOException,InterruptedException {
 
      int sum=0;
      for(IntWritable x: values)
      {
        sum+=x.get();
      }
      context.write(key, new IntWritable(sum));
    }
   } 
  
  3. Driver
      Configuration conf= new Configuration();
      Job job = new Job(conf,"My Word Count Program"); //customize
      job.setJarByClass(WordCount.class);
      job.setMapperClass(Map.class);
      job.setReducerClass(Reduce.class);
      job.setOutputKeyClass(Text.class);
 
      job.setOutputValueClass(IntWritable.class);
      job.setInputFormatClass(TextInputFormat.class);
      job.setOutputFormatClass(TextOutputFormat.class);
      Path outputPath = new Path(args[1]);
 
//Configuring the input/output path from the filesystem into the job
      FileInputFormat.addInputPath(job, new Path(args[0]));
      FileOutputFormat.setOutputPath(job, new Path(args[1]));
