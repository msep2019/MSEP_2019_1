Storm[4] is for stream processing, and thus it is different from what we have done in the last semester, which is batch processing. Stream processing is usually applied in real-time computing. 
In [3], the authors show a real time streaming IDS with Storm, and the machine learning algorithm they use is SVM. 

In [1], the authors use Storm to detect anomalies in real time. 
They think Storm is appropriate due to the distributed programming, continuous computing model and transfer mode. 
In the data processing step, they use spout to pre-process the source flows and get particular features. 
The anomalies detection algorithm is implemented in multistage bolts, and knn is used for judging anomalies. 
They use HBase to store the tables and have modules for monitor, TopN, storage and query.

In [2], network flows are analysed at real time with the combination of Kafka and Storm. 
They use HDFS to produce flow data, Kafka to put flow tuple data into Storm, and Storm to deal with topologies for anomaly detection. 
There are four components in streaming process.
For Kafka Spout, it streams the flow data into the next component, which is Data Preprocessing Bolt.
Data Preprocessing Bolt deals with data pre-processing like data filtering, and it excludes worthless data. 
Anomaly Detection Bolt detects anomalies, the data from which is then trained in Machine Learning Bolt, where Weka is involved.

About Storm, Flink and Samza:
Storm [4]
    Storm deals with streams of data, which is appropriate for real-time processing and computing (By comparison, Hadoop does batch processing). 
    Storm is scalable and fault-tolerant.
    Storm supports various programming languages.
    Topologies are created, deployed to and executed on a Storm cluster, which is a graph of computation. The node is a spout or bolt.
    The stream in Storm is a sequence of tuples. The data model is tuples.
    When throughput is high, Storm has lower latency than Spark Streaming. [16]
    Storm performs better in terms of latency with acking disabled, but in this case, it cannot deal with tuple failures. [16]

Flink [5] and Samza [6]
    Flink is suitable for both stream and batch processing.
    The core of Flink is a streaming engine, and its batch processing is also built on top of the streaming engine.
    Samza is for stream processing in real time, which is similar to Storm.
    Samza can run on Yarn or Standalone mode.
    The stream being possessed is messages, each of which is a key-value pair.
    Samza provides integrations with Apache Kafka, Apache Hadoop and so on.

Reference:
[1] Y. Du, J. Liu, F. Liu, and L. Chen, “A real-time anomalies detection system based on streaming technology,” in 2014 Sixth International Conference on Intelligent Human-Machine Systems and Cybernetics, vol. 2, Aug 2014, pp. 275–279.
[2] S. Zhao, M. Chandrashekar, Y. Lee and D. Medhi, "Real-time network anomaly detection system using machine learning," 2015 11th International Conference on the Design of Reliable Communication Networks (DRCN), Kansas City, MO, 2015, pp. 267-270.
[3] M. A. Manzoor and Y. Morgan, "Real-time Support Vector Machine based Network Intrusion Detection system using Apache Storm," 2016 IEEE 7th Annual Information Technology, Electronics and Mobile Communication Conference (IEMCON), Vancouver, BC, 2016, pp. 1-5.
[4] https://storm.apache.org/
[5] https://flink.apache.org/
[6] http://samza.apache.org/
